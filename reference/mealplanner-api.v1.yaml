openapi: 3.0.0
info:
  title: Meal Planner API
  version: '1.0'
  description: Meal planner API to keep track of meals and weekly meal plan
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: EXAMPLE Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the infromation of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: EXAMPLE Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /meals:
    get:
      summary: Get All Meals
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                items:
                  type: object
                  required:
                    - id
                    - title
                    - user
                  properties:
                    id:
                      type: number
                    title:
                      type: string
                      minLength: 1
                    user:
                      type: object
                      properties:
                        email:
                          type: string
                          minLength: 1
                        id:
                          type: number
                      required:
                        - email
                        - id
              examples: {}
      operationId: get-meals
      description: Retrieve all meal information.
    post:
      summary: Create New Meal
      operationId: post-meals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: number
                  title:
                    type: string
                    minLength: 1
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        minLength: 1
                      id:
                        type: number
                    required:
                      - email
                      - id
                required:
                  - id
                  - title
                  - user
              examples:
                Create Meal Sweet Potato Burrito Bowls:
                  value:
                    id: 23
                    title: Sweet Potato Burrito Bowls
                    user:
                      email: test@test.com
                      id: 6
      description: Create a new meal.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'JWT Bearer token required '
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
              required:
                - title
            examples:
              Create Meal Sweet Potato Burrito Bowls:
                value:
                  title: Sweet Potato Burrito Bowls
        description: Title of meal
  '/meals/{meal_id}':
    parameters:
      - schema:
          type: string
        name: meal_id
        in: path
        required: true
        description: ID of meal
    get:
      summary: Get Meal Info by Meal ID
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: number
                  title:
                    type: string
                    minLength: 1
                required:
                  - id
                  - title
      operationId: get-meals-meal_id
      description: Retrieve the information of a single meal with matching ID.
      parameters: []
    put:
      summary: Update A Meal
      operationId: put-meals-meal_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: number
                  title:
                    type: string
                    minLength: 1
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        minLength: 1
                      id:
                        type: number
                    required:
                      - email
                      - id
                required:
                  - id
                  - title
                  - user
              examples: {}
      description: Update the information of an existing meal.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'JWT Bearer token required '
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
              required:
                - title
            examples: {}
    delete:
      summary: Delete A Meal
      operationId: delete-meals-meal_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: number
                  title:
                    type: string
                    minLength: 1
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        minLength: 1
                      id:
                        type: number
                    required:
                      - email
                      - id
                required:
                  - id
                  - title
                  - user
      description: Delete a meal
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'JWT Bearer token required '
          required: true
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    Meal:
      title: Meal
      type: object
      description: ''
      properties:
        id:
          type: string
        title:
          type: string
  securitySchemes: {}
